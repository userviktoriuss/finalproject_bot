                            --= ДОКУМЕНТАЦИЯ =--
Дорогой друг! Это документация к моему вырвиглазному проекту telegram-бота для
интернет-магазина. Я очень старался сделать его быстро, но не старался сделать его
красивым. Поэтому скоро ты будешь страдать.

Глобально есть 3 файла, с которыми я работаю:
1) settings.py - все важные константы (в частности - токен)
2) objects.py - все классы, которыми пользовался
3) main.py - апогей безумия; основная часть программы

Обо всём по порядку

        - settings -
здесь объявлен токен, а также константа HOME_DIR - индекс домашней папки,
PROJECT_PATH - путь к корневой папке проекта и логин-пароль для
корпоративной почты, куда будут приходить заказы

        - objects.py -
здесь объявлены классы User и Vertex.
User - класс пользователя. Он хранит личную информацию о каждом юзере, а также папку,
где он находится, и его корзину

Vertex - вершины, представляющие собой папки. Каждой вершине присвоен уникальный номер,
имя и good_id - номер товара, если папка является товаром, иначе 0.
Вся структура папок является деревом из этих вершин.
Для удобства поиска они лежат в словаре, из которого их можно достать по номеру

        - main.py -
Здесь существует деление на системные, админские и пользовательские команды

    ~ системные команды ~
Это системные команды. До них не добраться не только простым смертным, но и админам
add_dir(name, parent) - подвесить папку с названием name к вершине parent
rename_dir(number, new_name) - переименовать папку number. Новое название - new_name
delete_dir(number, save_children=False) - удалить папку number. Если save_children=False,
все дети вершины удаляются. Иначе они привяжутся к её родителю

    ~ админские команды ~
/addadmin - интерфейс для добавления админа. Им может пользоваться только администратор
Добавление происходит по id, фиг знает, откуда его брать, это вообще не очень удобно
для юзеров, но мне по барабану.

/edit - интерфейс для редактирования каталогов админами. Каждому админу в любой момент времени
доступна одна из следующих команд, выолняемых в бесконечном цикле:
1) 0 - вернуться в родительскую папку
2) <folder number> - перейти в папку по номеру, с которым она перечислена в меню
3) + <folder name> - добавить в текущую папку новую с названием <folder name>
4) - <folder number> - удалить среди детей папку, которая имела в меню номер <folder number>
    при этом дети вершины привяжутся к текущей папке
5) -- <folder number> - то же, что и 4), но дети удалятся
6) - - удалить текущую папку с перепривязкой детей к родителям
7) -- - то же, что и 6), но дети удалятся
8) п <folder number> <folder name> - переименовать папку с номером в меню <folder number>
в <folder name>
9) П <folder number> <folder name> - то же, что и 8)
10) с - покинуть функцию
11) s - то же, что и 10)
12) С - то же, что и 10)
13) S - то же, что и 10)
14) /g, /G, /т, /Т - создать товар. При создании спрашивается название, описание и фото товара


    ~ команды ползователей ~
/start - запускает бота и предлагает пользователю зарегистрироваться.
На вход требуются имя и номер телефона
Если пользователь уже зарегистрирован, этот шаг заменяется приветствием старого пользователя

Далее пользователю предлагается перейти в каталог, в пределах которого он будет зациклен
в методе process_catalogue_step.
В рамках этого метода доступны следующие операции:
1) 0 - вернуться в родительскую папку
2) <folder number> - перейти в папку по номеру, с которым она перечислена в меню
10) с - покинуть функцию
11) s - то же, что и 10)
12) С - то же, что и 10)
13) S - то же, что и 10)
